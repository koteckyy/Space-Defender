import pygame
import random
import math
from pygame import mixer
import time


pygame.init()

clock = pygame.time.Clock()

TEMPO = 4

# create the screen
screen = pygame.display.set_mode((800, 600))

# Title and Icon
pygame.display.set_caption("giera")
icon = pygame.image.load('ikona.png')
pygame.display.set_icon(icon)

# background
back = pygame.image.load('back.png')

# spaceship
playerImg = pygame.image.load('battleship.png')
playerImg_right = pygame.image.load('battleshipright.png')
playerImg_left = pygame.image.load('battleshipleft.png')
playerX = 370
playerY = 480
playerX_change = 0
playerY_change = 0

# score BOARD
score_value = 0
font = pygame.font.Font('freesansbold.ttf', 32)
textX = 320
textY = 10

# lives BOARD
lives_value = 10
live_font = pygame.font.Font('freesansbold.ttf', 32)
livesX = 650
livesY = 10

# levels board
level_value = 1
level_font = pygame.font.Font('freesansbold.ttf', 32)
levelX = 10
levelY = 10

# game over text
over_font = pygame.font.Font('freesansbold.ttf', 64)

# pause text
pause = pygame.font.Font('freesansbold.ttf', 64)

# counting text
counting_font = pygame.font.Font('freesansbold.ttf', 100)


def add_enemy():
    ufoImg.append(pygame.image.load('ufo.png'))
    ufoImgX.append(random.randint(1, 735))
    ufoImgY.append(random.randint(-200, -50))
    ufo_direction_list = [1, -1]
    ufodirection = random.choice(ufo_direction_list)
    ufoImgX_change.append(0.5 * TEMPO * ufodirection)
    ufoImgY_change.append(0.1 * TEMPO)


def ufo_randomize():
    ufo_direction_list = [1, -1]
    ufodirection = random.choice(ufo_direction_list)
    ufoImgX_change[i] = 0.5 * TEMPO * ufodirection
    ufoImgX[i] = random.randint(1, 735)
    ufoImgY[i] = random.randint(-200, -50)


# ufo
ufoImg = []
ufoImgX = []
ufoImgY = []
ufoImgX_change = []
ufoImgY_change = []
num_of_enemies = 12

for i in range(num_of_enemies):
    add_enemy()


def asteroid_rotation_angle(direction):
    global angle
    if direction == 0:
        angle = 0
    elif direction > 0:
        angle = 20
    elif direction < 0:
        angle = -20


def add_asteroid():
    pics = ['meteorites.png', 'meteorites2.png']
    nums = [0.3, 0.2, 0, -0.2, -0.3]
    nums1 = [0.5, 0.5, 0.5, 0.5, 0.6, 0.6, 1.6]
    num1 = random.choice(nums1) * TEMPO
    num = random.choice(nums) * TEMPO
    asteroid_rotation_angle(num)
    if num1 >= TEMPO:
        pic_choice = pics[0]
        asteroidImg_status.append(0)
    else:
        pic_choice = pics[1]
        asteroidImg_status.append(1)
    img = pygame.image.load(pic_choice)
    img1 = pygame.transform.rotate(img, -46)
    img2 = pygame.transform.rotate(img1, angle)
    asteroidImg.append(img2)
    asteroidImgX.append(random.randint(1, 735))
    asteroidImgY.append(random.randint(-200, -50))
    asteroidImgY_change.append(num1)
    asteroidImgX_change.append(num)


def asteroid_rendomize():
    pics = ['meteorites.png', 'meteorites2.png']
    nums = [0.3, 0.2, 0, -0.2, -0.3]
    nums1 = [0.5, 0.5, 0.5, 0.5, 0.6, 0.6, 1.6]
    num1 = random.choice(nums1) * TEMPO
    num = random.choice(nums) * TEMPO
    asteroid_rotation_angle(num)
    if num1 >= TEMPO:
        pic_choice = pics[0]
        asteroidImg_status[j] = 0
    else:
        pic_choice = pics[1]
        asteroidImg_status[j] = 1
    img = pygame.image.load(pic_choice)
    img1 = pygame.transform.rotate(img, -46)
    img2 = pygame.transform.rotate(img1, angle)
    asteroidImg[j] = img2
    asteroidImgX_change[j] = num
    asteroidImgY_change[j] = num1
    asteroidImgY[j] = random.randint(-200, -50)
    asteroidImgX[j] = random.randint(1, 735)


# asteroid
asteroidImg = []
asteroidImgX = []
asteroidImgY = []
asteroidImgX_change = []
asteroidImgY_change = []
asteroidImg_status = []
num_of_asteroid = 6

for j in range(num_of_asteroid):
    add_asteroid()


def add_bullets():
    bulletImg.append(pygame.image.load('bullet.png'))
    bulletImgX.append(0)
    bulletImgY.append(480)
    bulletImgY_change.append(2 * TEMPO)
    bullet_state.append("ready")


# bullets
bulletImg = []
bulletImgX = []
bulletImgY = []
bulletImgY_change = []
bullet_state = []
num_of_bullets = 1

for b in range(num_of_bullets):
    add_bullets()


def show_score(x, y):
    score = font.render("SCORE: " + str(score_value), True, (255, 255, 255))
    screen.blit(score, (x, y))


def show_lives(x, y):
    lives = live_font.render("LIVES: " + str(lives_value), True, (255, 0, 0))
    screen.blit(lives, (x, y))


def show_level(x, y):
    level = live_font.render("LEVEL: " + str(level_value), True, (0, 0, 255))
    screen.blit(level, (x, y))


def middle_text(x, y, z):
    if z == 0:
        over_text = over_font.render("GAME OVER", True, (255, 255, 255))
        screen.blit(over_text, (x, y))
    if z == 1:
        over_text = over_font.render("PAUSE", True, (255, 255, 255))
        screen.blit(over_text, (x, y))
    if z == 2:
        over_text = over_font.render("SPACE DEFENDER", True, (255, 255, 255))
        screen.blit(over_text, (x, y))


def pause_text(x, y):
    pause_text = over_font.render("PAUSE", True, (255, 255, 255))
    screen.blit(pause_text, (x, y))


def counting_text(x, y, text):
    counting_text = counting_font.render(text, True, (255, 255, 255))
    screen.blit(counting_text, (x, y))


def counting_screen_reset(x):
    screen.blit(back, (0, 0))
    show_lives(livesX, livesY)
    show_score(textX, textY)
    show_level(levelX, levelY)
    if isover == 0:
        player(playerX, playerY, 1)
    counting_text(375, 250, x)
    pygame.display.update()
    time.sleep(1)


def player(x, y, z):
    if z == 1:
        screen.blit(playerImg, (x, y))
    if z == 2:
        screen.blit(playerImg_left,(x,y))
    if z == 3:
        screen.blit(playerImg_right, (x, y))

def enemy(x, y, i):
    screen.blit(ufoImg[i], (x, y))


def enemy_asteroid(x, y, j):
    screen.blit(asteroidImg[j], (x, y))


def fire_bullet(x, y):
    global bullet_state
    bullet_state[b] = 'fire'
    screen.blit(bulletImg[b], (x + 20, y + 10))


def colision_bullet_vs_enemy(enemyX, enemyY, bulletX, bulletY):
    if bullet_state[b] == 'fire':
        distance = math.sqrt(math.pow(enemyX - bulletX, 2) + math.pow(enemyY - bulletY, 2))
        if distance < 35:
            return True


def colision_bullet_vs_asteroid(asteroidX, asteroidY, bulletX, bulletY):
    if bullet_state[b] == 'fire':
        distance = math.sqrt(math.pow(asteroidX - bulletX, 2) + math.pow(asteroidY - bulletY, 2))
        if distance < 27:
            return True


def colision_player_vs_enemy(enemyX, enemyY, playerX, playerY):
    distance = math.sqrt(math.pow(enemyX - playerX, 2) + math.pow(enemyY - playerY, 2))
    if distance < 50:
        return True


def colision_player_vs_asteroid(asteroidX, asteroidY, playerX, playerY):
    distance = math.sqrt(math.pow(asteroidX - playerX, 2) + math.pow(asteroidY - playerY, 2))
    if distance < 50:
        return True


def check_level(score):
    global counter
    global level_value
    global counter_asteroids
    if score % 8 == 0:
        if counter >= 0:
            counter -= 1
        if counter_asteroids >= 0 and level_value > 2:
            counter_asteroids -= 1
        level_value += 1
        level_Sound = mixer.Sound('levelup.wav')
        level_Sound.play()
    # elif score % 5 == 0 and level_value >( 4 and level_value <= 8:
    # counter -= 2
    # level_value += 1
    # elif score % 5 == 0 and level_value > 8:
    # counter -= 3
    # level_value += 1


def pause(x):
    global ispause
    global TEMPO
    global ismenu
    if x == 1:
        ispause = True
        TEMPO = 0
    if x == 2:
        ispause = False
        TEMPO = 4
    if x == 3:
        ismenu = True
        TEMPO = 0
    if x == 4:
        ismenu = False
        TEMPO = 4
        czaas = 1
        while czaas > 0:
            intro_Sound = mixer.Sound('intro.wav')
            intro_Sound.play()
            counting_screen_reset("3")
            counting_screen_reset("2")
            counting_screen_reset("1")
            czaas -= 1

def check_keys():
    global playerX_change
    global playermove
    global playerY_change
    global keyX_right_push
    global keyX_left_push

    if keyX_right_push == True:
            playerX_change = 5
            playermove = 2

    if keyX_left_push == True:
            playerX_change = -5
            playermove = 1


    if keyY_up_push == True:
        playerY_change = -5
    if keyY_down_push == True:
        playerY_change = 5


counter = 8
counter_asteroids = 6

keyX_right_push = False
keyX_left_push = False
keyY_up_push = False
keyY_down_push = False

isover = False
running = True
ispause = False
ismenu = True
playermove = 0

mixer.music.load('music.wav')
mixer.music.play(-1)

# GAME LOOP
while running:

    clock.tick(120)

    # RGB - RED Green blue
    screen.fill((0, 0, 0))
    # image background
    screen.blit(back, (0, 0))

    # EVENTS
    for event in pygame.event.get():
        # zamkniÄ™cie
        if event.type == pygame.QUIT:
            running = False

        # klawisze
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                keyX_right_push = True
            if event.key == pygame.K_LEFT or event.key == pygame.K_a:
                keyX_left_push = True
            if event.key == pygame.K_UP or event.key == pygame.K_w:
                keyY_up_push = True
            if event.key == pygame.K_DOWN or event.key == pygame.K_s:
                keyY_down_push = True
            if event.key == pygame.K_SPACE:
                if bullet_state[b] == "ready":
                    bullet_Sound = mixer.Sound('laser.wav')
                    bullet_Sound.play()
                    bulletImgX[b] = playerX
                    bulletImgY[b] = playerY
                    fire_bullet(bulletImgX[b], bulletImgY[b])

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_a:
                keyX_left_push = False
                if keyX_right_push == False:
                    playerX_change = 0.0
                    playermove = 0


            if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                keyX_right_push = False
                if keyX_left_push == False:
                    playerX_change = 0.0
                    playermove = 0


            if event.key == pygame.K_UP or event.key == pygame.K_w:
                if keyY_down_push == False:
                    playerY_change = 0.0
                keyY_up_push = False
            if event.key == pygame.K_DOWN or event.key == pygame.K_s:
                if keyY_up_push == False:
                    playerY_change = 0.0
                keyY_down_push = False
            if event.key == pygame.K_ESCAPE:
                pause(1)

    check_keys()

    # PLAYER LIMITS
    playerX += playerX_change
    playerY += playerY_change
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:
        playerX = 736
    if playerY <= 200:
        playerY = 200
    elif playerY >= 480:
        playerY = 480

    # MECHANIC OF ENEMYS
    if isover == False:
        for i in range(counter, num_of_enemies):

            isCollision_player_vs_enemy = colision_player_vs_enemy(ufoImgX[i], ufoImgY[i], playerX, playerY)
            isCollision_bullet_vs_enemy = colision_bullet_vs_enemy(ufoImgX[i], ufoImgY[i], bulletImgX[b], bulletImgY[b])

            # collision with player??
            if isCollision_player_vs_enemy:
                colision_Sound = mixer.Sound('die.wav')
                colision_Sound.play()
                lives_value -= 1
                ufo_randomize()

            # border??
            if ufoImgX[i] <= 0:
                ufoImgX_change[i] = ufoImgX_change[i] * -1
            elif ufoImgX[i] >= 735:
                ufoImgX_change[i] = ufoImgX_change[i] * -1

            # reset position of y
            if ufoImgY[i] >= 700:
                ufo_randomize()

            # enemy shot down?
            if isCollision_bullet_vs_enemy:
                colision_Sound = mixer.Sound('explosion.wav')
                colision_Sound.play()
                colision1_Sound = mixer.Sound('coin.wav')
                colision1_Sound.play()
                bulletImgY[b] = 480
                bullet_state[b] = "ready"
                score_value += 1
                ufo_randomize()
                check_level(score_value)

            # movement
            ufoImgX[i] += ufoImgX_change[i]
            ufoImgY[i] += ufoImgY_change[i]

            # printing
            enemy(ufoImgX[i], ufoImgY[i], i)

        # MECHANIC OF ASTEROIDS
        for j in range(counter_asteroids, num_of_asteroid):

            isCollision_player_vs_asteroid = colision_player_vs_asteroid(asteroidImgX[j], asteroidImgY[j], playerX,
                                                                         playerY)
            isCollision_bullet_vs_asteroid = colision_bullet_vs_asteroid(asteroidImgX[j], asteroidImgY[j],
                                                                         bulletImgX[b], bulletImgY[b])

            # collision with player??
            if isCollision_player_vs_asteroid:
                colision_Sound = mixer.Sound('die.wav')
                colision_Sound.play()
                lives_value -= 1
                asteroid_rendomize()

            # reset position of y
            if asteroidImgY[j] >= 700:
                asteroid_rendomize()

            # enemy shot down?
            if isCollision_bullet_vs_asteroid:
                colision_Sound = mixer.Sound('explosion.wav')
                colision_Sound.play()
                bulletImgY[b] = 480
                bullet_state[b] = "ready"
                if asteroidImg_status[j] == 0:
                    colision1_Sound = mixer.Sound('coin2.wav')
                    colision1_Sound.play()
                    i = 0
                    while i < 3:
                        score_value += 1
                        check_level(score_value)
                        i += 1

                if asteroidImg_status[j] == 1:
                    score_value += 1
                    colision1_Sound = mixer.Sound('coin.wav')
                    colision1_Sound.play()
                asteroid_rendomize()
                check_level(score_value)

            # movement
            asteroidImgX[j] += asteroidImgX_change[j]
            asteroidImgY[j] += asteroidImgY_change[j]

            # printing
            enemy_asteroid(asteroidImgX[j], asteroidImgY[j], j)

        # bullet mechanic
        # bullet touch border:
        if bulletImgY[b] <= 0:
            bulletImgY[b] = 480
            bullet_state[b] = "ready"
        # bullet movement
        if bullet_state[b] == 'fire':
            fire_bullet(bulletImgX[b], bulletImgY[b])
            bulletImgY[b] -= bulletImgY_change[b]

    # GAME OVER
    if lives_value == 0:
        if isover == False:
            death_Sound = mixer.Sound('death.wav')
            death_Sound.play()
        isover = True
        middle_text(200, 250, 0)

    # ELEMENTS ON SCREEN
    show_level(levelX, levelY)
    show_lives(livesX, livesY)
    show_score(textX, textY)

    if playermove == 0:
        player(playerX, playerY, 1 )
    elif playermove == 1:
        player(playerX, playerY, 2)
    elif playermove == 2:
        player(playerX, playerY, 3)

    while ispause == True:
        for event in pygame.event.get():
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_ESCAPE:
                    pause(2)
            if event.type == pygame.QUIT:
                ispause = False
                running = False
        middle_text(280, 250, 1)
        pygame.display.update()

    while ismenu == True:

        middle_text(130, 250, 2)
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.KEYUP:
                pause(4)
            if event.type == pygame.QUIT:
                ismenu = False
                running = False

    if ispause == False:
        pygame.display.update()

